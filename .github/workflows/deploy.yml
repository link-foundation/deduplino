name: Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'test/**'
      - 'package.json'
      - 'bun.lock'
      - '.github/workflows/deploy.yml'

env:
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  findChangedFiles:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.changes.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- src/ test/ package.json bun.lock .github/workflows/deploy.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: findChangedFiles
    if: needs.findChangedFiles.outputs.changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Run tests
        run: bun test

  publishToNpm:
    runs-on: ubuntu-latest
    needs: [test, findChangedFiles]
    if: needs.findChangedFiles.outputs.changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build

      - name: Check if version exists
        id: version_check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "Version $PACKAGE_VERSION already exists on NPM"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist on NPM"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup NPM authentication
        if: steps.version_check.outputs.exists == 'false'
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

      - name: Publish to NPM
        if: steps.version_check.outputs.exists == 'false'
        run: npm publish

      - name: Get package info
        if: steps.version_check.outputs.exists == 'false'
        id: package_info
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version_check.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_info.outputs.version }}
          release_name: Release v${{ steps.package_info.outputs.version }}
          body: |
            ðŸ“¦ **NPM Package**: https://www.npmjs.com/package/${{ steps.package_info.outputs.name }}/v/${{ steps.package_info.outputs.version }}
          draft: false
          prerelease: false